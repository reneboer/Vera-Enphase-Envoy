<?xml version="1.0"?>
<implementation>
<functions>
	-- Written by Rene Boer.
	-- Thanks to elordude, Jacob and robertgabrielson.
	json = require("dkjson")
	local EData = { 
		Version = "2.3 20191012",
		Description = "Envoy",
		LogLevel = 3,
		SID = "urn:rboer-com:serviceId:Envoy1",
		ESID = "urn:micasaverde-com:serviceId:EnergyMetering1",
		ASID = "urn:upnp-org:serviceId:altui1",
		DEVICE = nil,
		URL = "",
		DInterval = 30,
		NInterval = 1800,
		syslog
	}
	---------------------------------------------------------------------------------------------
	-- Utility functions
	---------------------------------------------------------------------------------------------
	local function log(text, level) 
		local level = (level or 10)
		if (EData.LogLevel >= level) then
			if (EData.syslog) then
				local slvl
				if (level == 1) then slvl = 2 
				elseif (level == 2) then slvl = 4 
				elseif (level == 3) then slvl = 5 
				elseif (level == 4) then slvl = 5 
				elseif (level == 7) then slvl = 6 
				elseif (level == 8) then slvl = 6 
				else slvl = 7
				end
				EData.syslog:send(text,slvl) 
			else
				if (level == 10) then level = 50 end
				luup.log(EData.Description .. ": " .. text or "no text", (level or 50)) 
			end	
		end	
	end 
	-- Get variable value.
	-- Use EData.SID and EData.DEVICE as defaults
	local function varGet(name, service, device)
		local value = luup.variable_get(service or EData.SID, name, tonumber(device or EData.DEVICE))
		return (value or '')
	end
	-- Update variable when value is different than current.
	-- Use EData.SID and EData.DEVICE as defaults
	local function varSet(name, value, service, device)
		local service = service or EData.SID
		local device = tonumber(device or EData.DEVICE)
		local old = luup.variable_get(service, name, device)
		if (tostring(value) ~= old) then 
			luup.variable_set(service, name, value, device)
		end
	end
	--get device Variables, creating with default value if non-existent
	local function defVar(name, default, service, device)
		local service = service or EData.SID
		local device = tonumber(device or EData.DEVICE)
		local value = luup.variable_get(service, name, device) 
		if (not value) then
			value = default	or ''							-- use default value or blank
			luup.variable_set(service, name, value, device)	-- create missing variable with default value
		end
		return value
	end
	-- Set a luup failure message
	local function setluupfailure(status,devID)
		if (luup.version_major &lt; 7) then status = status ~= 0 end        -- fix UI5 status type
		luup.set_failure(status,devID)
	end
	-- Syslog server support. From Netatmo plugin by akbooer
	function syslog_server (ip_and_port, tag, hostname)
		local sock = socketLib.udp()
		local facility = 1    -- 'user'
		local emergency, alert, critical, error, warning, notice, info, debug = 0,1,2,3,4,5,6,7
		local ip, port = ip_and_port: match "^(%d+%.%d+%.%d+%.%d+):(%d+)$"
		if not ip or not port then return nil, "invalid IP or PORT" end
		local serialNo = luup.pk_accesspoint
		hostname = ("Vera-"..serialNo) or "Vera"
		if not tag or tag == '' then tag = EData.Description end
		tag = tag:gsub("[^%w]","") or "HarmonyHub"  -- only alphanumeric, no spaces or other
		local function send (self, content, severity)
			content  = tostring (content)
			severity = tonumber (severity) or info
			local priority = facility*8 + (severity%8)
			local msg = ("&lt;%d>%s %s %s: %s\n"):format (priority, os.date "%b %d %H:%M:%S", hostname, tag, content)
			sock:send (msg) 
		end
		local ok, err = sock:setpeername(ip, port)
		if ok then ok = {send = send} end
		return ok, err
	end
	
	-- Start up routine
	function ENVOY_Startup(envoy_device)
		log("Starting ENVOY Device",3)
		varSet("DisplayLine1", "Starting... ", EData.ASID)
		EData.DEVICE = lul_device
		varSet("Version", EData.Version)
		defVar("ActualUsage", 1, EData.ESID)
		-- See if user disabled plug-in 
		local isDisabled = luup.attr_get("disabled", EData.DEVICE)
		if ((isDisabled == 1) or (isDisabled == "1")) then
			log("Init: Plug-in version "..EData.Version.." - DISABLED",2)
			varSet("DisplayLine1", "Disabled. ", EData.ASID)
			setluupfailure(0, EData.DEVICE)
			return true
		end

		EData.DInterval = defVar("DayInterval",EData.DInterval)
		EData.NInterval = defVar("NightInterval",EData.NInterval)
		EData.LogLevel = tonumber(defVar("LogLevel", EData.LogLevel))
		local syslogInfo = defVar ("Syslog")	-- send to syslog if IP address and Port 'XXX.XX.XX.XXX:YYY' (default port 514)
		local ipa = luup.attr_get("ip", EData.DEVICE)
		local ipAddress = string.match(ipa, '^(%d%d?%d?%.%d%d?%d?%.%d%d?%d?%.%d%d?%d?)')
		if (ipAddress == nil) then
			setluupfailure(1, EData.DEVICE)
			return false, "Configure IP Address.", EData.Description
		end
		-- set up logging to syslog	
		if (syslogInfo ~= '') then
			log('Starting UDP syslog service...',7) 
			local err
			local syslogTag = luup.devices[EData.DEVICE].description or EData.Description 
			EData.syslog, err = syslog_server (syslogInfo, syslogTag)
			if (not EData.syslog) then log('UDP syslog service error: '..err,2) end
		end
		log("Using Envoy IP address " .. ipAddress)
		EData.URL = "http://" .. ipAddress .. "/api/v1/production"
		log("Envoy API URL " .. EData.URL)
		-- Schedule to start polling in 10 sec
		luup.call_delay("ENVOY_Retrieve",10)
		log("Envoy: ENVOY_Startup completed ")
		setluupfailure(0, EData.DEVICE)
		return true
	end
		
	-- Retreive data from Enphase Envoy
	function ENVOY_Retrieve()
		local HTTP_Code, ENVOY_Raw = luup.inet.wget(EData.URL,5)

		if (HTTP_Code == 0) then
			log("Retrieve HTTPget Complete...")
--			log(ENVOY_Raw)
			local retData = json.decode(ENVOY_Raw)
			log("Current Power --> "..retData.wattsNow.."  --> W")
			log("WattsHour Today --> "..retData.wattHoursToday.."  --> Wh")
			log("WattsHour Week --> "..retData.wattHoursSevenDays.."  --> Wh")
			log("WattsHour Lifetime --> "..retData.wattHoursLifetime.."  --> Wh")
			-- Set values in PowerMeter
			varSet("Watts", retData.wattsNow, EData.ESID)
			varSet("KWH", retData.wattHoursToday/1000, EData.ESID)
			varSet("DayKWH", retData.wattHoursToday/1000, EData.ESID)
			varSet("WeekKWH", retData.wattHoursSevenDays/1000, EData.ESID)
			varSet("LifeKWH", retData.wattHoursLifetime/1000, EData.ESID)
			local fmt ="Today: %.3f  Week: %.1f"
			varSet("DisplayLine1", fmt:format(retData.wattHoursToday/1000 ,retData.wattHoursSevenDays/1000), EData.ASID)
			log("Finished Call "..retData.wattsNow.." --> "..retData.wattHoursToday.." --> "..retData.wattHoursSevenDays.." --> "..retData.wattHoursLifetime)
			retData = nil  -- does this reduce memory usage?
		else
			varSet("Watts", 0, EData.ESID)
			varSet("KWH", 0, EData.ESID)
			varSet("DayKWH", 0, EData.ESID)
			log("HTTPget to "..EData.URL.." failed. Error :"..HTTP_Code,2)
		end
		local AppMemoryUsed =  math.floor(collectgarbage "count")         -- app's own memory usage in kB
		varSet("AppMemoryUsed", AppMemoryUsed) 
		if(luup.is_night()) then
			log("Is Night use Night delayInterval ENVOY_Retrieve --> "..EData.NInterval)
			luup.call_delay("ENVOY_Retrieve",EData.NInterval)	
		else 
			log("Is Day use Day delay Interval ENVOY_Retrieve --> "..EData.DInterval)
			luup.call_delay("ENVOY_Retrieve",EData.DInterval)
		end
	end
	</functions>
	<startup>ENVOY_Startup</startup>
</implementation>